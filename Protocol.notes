# Protokol:

**This Format Uses Little Endian**

## Commands:

01 00 => 1     => Get
02 00 => 2     => Set
03 00 => 3     => Result
ff ff => 65535 => Terminate

## Types:

00 00 => Null
01 00 => String
02 00 => Int 64
03 00 => Float 64
04 00 => Path
05 00 => Table
06 00 => Bool
//07 00 => Set
//08 00 => Array

# Type Format:  

Value is [usize Size] [u16 Type] [Content]

-------------------------------------------------------------------------
## Null
[Nothing]

## Null Value
[Size] [Type] [Content]
(02 00 00 00 00 00 00 00) (00 00) () 

-------------------------------------------------------------------------

## String:
[Content]
(61 73 64 66 67 68)

## String Value:
[Size] [Type] [Content]
(08 00 00 00 00 00 00 00) (01 00) (61 73 64 66 67 68) 

-------------------------------------------------------------------------

## Int64
[Content]
(0A 00 00 00 00 00 00 00)

## Int64 Value:
[Size] [Type] [Content]
(0A 00 00 00 00 00 00 00) (02 00) (0A 00 00 00 00 00 00 00)

-------------------------------------------------------------------------

## Float64
[Content]
(00 00 00 00 00 00 00 00)

## Float64 Value:
[Size] [Type] [Content]
(0A 00 00 00 00 00 00 00) (03 00) (00 00 00 00 00 00 00 00)

-------------------------------------------------------------------------

## Path
[Segment Count] [Segment1 Length] [Segment1 Content] [Segment2 Length] [Segment2 Content] ...
(02 00) (06 00 00 00 00 00 00 00) (61 73 64 66 67 68) (03 00 00 00 00 00 00 00) (97 97 97)

## Path Value
[Size] [Type] [Content]
(1D 00 00 00 00 00 00 00) (04 00) (02 00) (06 00 00 00 00 00 00 00) (61 73 64 66 67 68) (03 00 00 00 00 00 00 00) (97 97 97)

-------------------------------------------------------------------------

## Table
[KV Count] [Key1 Length] [Key1 Content] [Value1] ...
(01 00 00 00) (03 00 00 00 00 00 00 00) (97 97 97) (0A 00 00 00 00 00 00 00) (02 00) (0A 00 00 00 00 00 00 00)
// Table { "aaa": 10 }

## Table Value
(23 00 00 00 00 00 00 00) (05 00) (01 00 00 00) (03 00 00 00 00 00 00 00) (97 97 97) (0A 00 00 00 00 00 00 00) (02 00) (0A 00 00 00 00 00 00 00)

-------------------------------------------------------------------------

## Bool
[Content]
(01)

## Bool Value
[Size] [Type] [Content]
(03 00 00 00 00 00 00 00) (06 00) (01)

-------------------------------------------------------------------------

## Set
Work in Progress

-------------------------------------------------------------------------

## Array
Work in Progress

-------------------------------------------------------------------------
                            Commands
-------------------------------------------------------------------------

# Commands:
// Argument Count of Every Command is Fixed, so there is no need for arg count
[Size] [Type] [Value1] [Value2]

-------------------------------------------------------------------------

## Get

Arg1 => (String Value) | (Path Value) //path
Return => (Result Command)

[Size] [Type] [Path Arg] 
(12 00 00 00 00 00 00 00) (01 00) (08 00 00 00 00 00 00 00) (01 00) (61 73 64 66 67 68)
// GET /asdfgh

-------------------------------------------------------------------------

## Set

Arg1 => (String Value) | (Path Value) //path
Arg2 => (Any Value) //value
Return => (Result Command(Bool))

[Size] [Type] [Path Arg] 
(24 00 00 00 00 00 00 00) (01 00) (08 00 00 00 00 00 00 00) (01 00) (61 73 64 66 67 68) (0A 00 00 00 00 00 00 00) (02 00) (0A 00 00 00 00 00 00 00)
// SET /asdfgh 10

-------------------------------------------------------------------------

## Result

Arg1 => (Any Value) //result
Return => ()

[Size] [Type] [Path Arg] 
(14 00 00 00 00 00 00 00) (01 00) (0A 00 00 00 00 00 00 00) (02 00) (03 00 00 00 00 00 00 00)
// Result 3